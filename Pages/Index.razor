@page "/"

<PageTitle>Todos</PageTitle>

<h3>Todos</h3>

@if(tf.Get() is not null)
{
  <div class="input-group mb-3">
    <input type="text" @bind="@description" class="form-control" placeholder="Enter a to-do description some new new" />
    <button class="btn btn-outline-secondary" @onclick="Add">Add</button>
  </div>

  @if(error.Length > 0)
  {
    <div class="alert alert-danger alert-dismissible">
      <strong>Error</strong> @error
      <button type="button" class="btn-close" @onclick="HideError"></button>
    </div>
  }

  <ul class="list-group mb-3">
    @foreach (var todo in tf.Get())
    {
      <li class="list-group-item d-flex align-items-center justify-content-between">
      <div>
        <input  id="@todo.Id" type="checkbox" @onchange="@(e => Update(e.Value, todo))" class="form-check-input" checked="@todo.Completed">
        <label for="@todo.Id" class="form-check-label @(todo.Completed ? "completed" : "")" >@todo.Title</label>
      </div>
      <input type="button" value="Delete" class="btn btn-sm btn-outline-danger" @onclick="@(e => Delete(todo))" />
    </li>
    }
  </ul>
}

@code {
    string description = string.Empty;
    string error = string.Empty;
    
    TodoFactory tf = new();

    void HideError() => error = string.Empty;
    
    void Update(object completed, Todo todo)
    {
      HideError();
      if(!tf.Update(completed, todo))
        error = "Couldn't update the to-do.";
    }

    void Delete(Todo todo)
    {
      HideError();
      tf.Delete(todo);
    }

    void Add(){
      try
      {
        HideError();
        tf.Add(description);
        description = string.Empty;
      }
      catch(ArgumentException ex) { error = ex.Message; }
      catch {error = "Couln't add the to-do."; }
    }
}
